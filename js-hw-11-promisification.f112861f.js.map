{"version":3,"sources":["task-1.js","task-2.js","task-3.js","index.js"],"names":["delay","ms","Promise","resolved","setTimeout","logger","time","console","log","users","name","active","toggleUserState","allUsers","userName","resolve","map","user","loggers","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","id","reject","canProcess","logSuccess","logError","warn","then","amount","catch"],"mappings":"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","file":"js-hw-11-promisification.f112861f.js","sourceRoot":"..","sourcesContent":["// Задание 1\r\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд.\r\n// Значением исполнившегося промиса должно быть то кол - во миллисекунд которое передали во время вызова функции delay.\r\n\r\nexport const delay = ms => {\r\n    return new Promise((resolved) => {\r\n        setTimeout(() => {\r\n            resolved(ms);\r\n        }, ms);\r\n    });\r\n};\r\n\r\nexport const logger = time => console.log(`Resolved after ${time}ms`);","// Задание 2\r\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback - функцию callback, \r\n// а принимала всего два параметра allUsers и userName и возвращала промис.\r\n\r\nexport const users = [\r\n    { name: \"Mango\", active: true },\r\n    { name: \"Poly\", active: false },\r\n    { name: \"Ajax\", active: true },\r\n    { name: \"Lux\", active: false },\r\n];\r\n\r\nexport const toggleUserState = (allUsers, userName) => {\r\n    return new Promise((resolve) => {\r\n        const updatedUsers = allUsers.map((user) =>\r\n            user.name === userName ? { ...user, active: !user.active } : user\r\n        );\r\n        resolve(updatedUsers);\r\n    });\r\n};\r\n\r\nexport const loggers = (updatedUsers) => console.table(updatedUsers);\r\n\r\n","// // Задание 3\r\n// // Перепиши функцию makeTransaction() так, чтобы она не использовала callback - функции onSuccess и onError,\r\n// // а принимала всего один параметр transaction и возвращала промис.\r\n\r\n\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nexport const makeTransaction = ({ id }) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const canProcess = Math.random() > 0.3;\r\n\r\n        setTimeout(() => {\r\n            if (canProcess) {\r\n                resolve({ id, delay });\r\n            }\r\n            reject({ id });\r\n        }, delay);\r\n    })\r\n};\r\n\r\n\r\nexport const logSuccess = ({ id, delay }) => {\r\n    console.log(`Transaction ${id} processed in ${delay}ms`);\r\n};\r\n\r\nexport const logError = ({ id }) => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n\r\n\r\n","// task-1\r\nimport { delay, logger } from './task-1';\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n\r\n\r\n\r\n// task-2\r\nimport { users, toggleUserState, loggers } from './task-2';\r\n\r\n/*\r\n * Сейчас работает так\r\n * /\r\ntoggleUserState(users, 'Mango', logger);\r\ntoggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, \"Mango\").then(loggers);\r\ntoggleUserState(users, \"Lux\").then(loggers);\r\n\r\n\r\n\r\n// task-3\r\nimport { makeTransaction, logSuccess, logError } from './task-3';\r\n// /*\r\n//  * Работает так\r\n//  */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n// /*\r\n//  * Должно работать так\r\n//  */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n    .then(logSuccess)\r\n    .catch(logError);"]}